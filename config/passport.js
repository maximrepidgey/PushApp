const LocalStrategy = require('passport-local').Strategy;

let Credentials = require('../models/Credential');
let UserAccount = require('../models/UserAccount');
let saveId;
module.exports = function (passport) {

    passport.serializeUser(function (user, done) {
        done(null, user.id);//passing id from generated by mongo
    });

    passport.deserializeUser(function (id, done) {
        Credentials.findById(id, function (err, user) {
            done(err, user);
        });
    });

    passport.use('local-register', new LocalStrategy({
            // by default, local strategy uses username and password
            passReqToCallback: true // allows us to pass back the entire request to the callback
        }, function (req, username, password, done) {
            // User.findOne wont fire unless data is sent back
            process.nextTick(async function () {
                try {
                    let found = await Credentials.findOne({username: username});
                    // if there already a user with that username
                    if (found) {
                        saveId = req.body.id;
                        saveId = saveId.toString();
                        return done(null, false, req.flash('id', saveId), req.flash('signup-Message', 'That username is already taken.'));
                    } else {
                        let put;
                        if (typeof saveId != "undefined") {
                            put = saveId;
                        } else {
                            put = req.body.id;
                        }
                        let cred = new Credentials();
                        cred.username = username;
                        cred.password = cred.generateHash(password);
                        cred._userAccountId = put;
                        let saved = await cred.save();
                        return done(null, saved);
                    }
                } catch (err) {
                    // if there are any errors, return the error
                    return done(err);
                }
            });
        })
    );

    passport.use('local-login', new LocalStrategy({
            // by default, local strategy uses username and password, we will override with email
            passReqToCallback: true // allows us to pass back the entire request to the callback
        },
        function (req, username, password, done) {
            Credentials.findOne({username: username}, function (err, user) {
                // if there are any errors, return the error before anything else
                if (err)
                    return done(err);
                // if no user is found, return the message
                if (!user)
                    return done(null, false, req.flash('loginMessage', 'Wrong password or username')); // req.flash is the way to set flashdata using connect-flash

                // if the user is found but the password is wrong
                if (!user.validPassword(password))
                    return done(null, false, req.flash('loginMessage', 'Wrong password or username')); // create the loginMessage and save it to session as flashdata

                // all is well, return successful user
                return done(null, user);
            });

        }));
};